generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  password  String
  position  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User Model:

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  companyName      String    @unique
  avatar           String?
  address          String
  city             String
  province         String
  postalCode       String
  phoneNumber      String    @unique
  email            String    @unique
  password         String
  owner            String
  firstName        String
  lastName         String
  operationYear    String
  annualPurchase   String?
  comments         String?
  /// Date when category was created
  createdAt        DateTime  @default(now())
  /// Date when category was last updated
  updatedAt        DateTime  @updatedAt
  resetToken       String? // Stores hashed OTP
  resetTokenExpiry DateTime? // Expiry time for OTP
  isApproved       Boolean   @default(false) // New field for admin approval

  // Opposite Relations
  orders             Order[]             @relation("UserOrders")
  cartItems          Cart[]
  wishlistItems      Wishlist[]
  discounts          Discount[]
  reviews            Review[]
  notifications      Notification[]
  inventoryTrackings InventoryTracking[]
  productManagements ProductManagement[]
}

// Category Model:

model Category {
  /// Primary key for the category
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Name of the category (e.g., Winter Tires)
  name        String   @unique
  /// Description of the category
  description String?
  /// Image of the category
  image       String?
  /// Slug for SEO-friendly URL
  slug        String   @unique
  /// Boolean flag to check if category is active
  isActive    Boolean  @default(true)
  /// Date when category was created
  createdAt   DateTime @default(now())
  /// Date when category was last updated
  updatedAt   DateTime @updatedAt

  // Relation to SubCategory
  subCategories SubCategory[]
  products      Product[]
}

// Sub-Category Model:

model SubCategory {
  /// Primary key for the subcategory
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Foreign key to the related category
  categoryId  String   @db.ObjectId
  /// Name of the subcategory (e.g., 195/65 Tires)
  name        String   @unique
  /// Description of the subcategory
  description String?
  /// Slug for SEO-friendly URL
  slug        String   @unique
  /// Boolean flag to check if subcategory is active
  isActive    Boolean  @default(true)
  /// Date when subcategory was created
  createdAt   DateTime @default(now())
  /// Date when subcategory was last updated
  updatedAt   DateTime @updatedAt

  // Relation to Category
  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]
}

// Product Model:

model Product {
  /// Primary key for the product
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Foreign key to the related category
  categoryId        String   @db.ObjectId
  /// Foreign key to the related subcategory
  subCategoryId     String   @db.ObjectId
  /// Name of the product (e.g., 185/65R15 88H Austone SP-901)
  name              String
  /// Description of the product
  description       String?
  /// SEO-friendly slug for URL
  handle            String?  @unique
  /// Stock Keeping Unit (SKU)
  sku               String   @unique
  /// Product price
  price             Float
  /// Price comparison (if available)
  compareAtPrice    Float?
  /// Quantity of products in stock
  stockQuantity     Int      @default(0)
  /// Minimum stock threshold before warning
  minStockThreshold Int      @default(1)
  /// Brand of the product (new field)
  brand             String?
  /// Tire width (new field)
  tireWidth         Int?
  /// Aspect ratio (new field)
  aspectRatio       Int?
  /// Rim size (new field)
  rimSize           Int?
  /// Product type (new field, e.g., Winter Tires, Tire Package)
  productType       String?
  /// Availability (new field, e.g., On Sale, New)
  availability      String?
  /// Weight of the product
  weight            Float?   @default(0)
  /// Dimensions of the product
  dimensions        Json?
  /// URL to the main image of the product
  featuredImage     String?
  /// Boolean to indicate if the product is active
  isActive          Boolean  @default(true)
  /// Date when product was created
  createdAt         DateTime @default(now())
  /// Date when product was last updated
  updatedAt         DateTime @updatedAt

  // Relations
  category    Category       @relation(fields: [categoryId], references: [id])
  subCategory SubCategory    @relation(fields: [subCategoryId], references: [id])
  variants    Variant[]
  images      ProductImage[]
  tags        ProductTag[]

  ProductFilter ProductFilter[]

  BundleProduct           BundleProduct[]
  // Opposite Relations
  orderItems              OrderItem[]
  cartItems               Cart[]
  wishlistItems           Wishlist[]
  discounts               Discount[]
  reviews                 Review[]
  inventoryTrackings      InventoryTracking[]
  bestSellingSalesReports SalesReport[]
  productManagements      ProductManagement[]
}

// Variants model:

model Variant {
  /// Primary key for the variant
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  /// Foreign key to the related product
  productId String  @db.ObjectId
  /// Title of the variant (e.g., Default Title)
  title     String
  /// Price of the variant
  price     Float
  /// SKU of the variant (if different from the product)
  sku       String?
  /// Quantity available for this variant
  quantity  Int     @default(0)

  // Relation to Product
  product Product @relation(fields: [productId], references: [id])
}

// Product Image Model:

model ProductImage {
  /// Primary key for the image
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  /// Foreign key to the related product
  productId String  @db.ObjectId
  /// Image source URL
  src       String
  /// Optional caption or alt text for the image
  altText   String?

  // Relation to Product
  product Product @relation(fields: [productId], references: [id])
}

// Bundles Model:

model Bundle {
  /// Primary key for the bundle
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Name of the bundle (e.g., Winter Tire Bundle)
  bundleName  String
  /// Description of the bundle
  description String?
  /// Price of the bundle
  price       Float
  /// Slug for SEO-friendly URL
  slug        String   @unique
  /// Date when the bundle was created
  createdAt   DateTime @default(now())
  /// Date when the bundle was last updated
  updatedAt   DateTime @updatedAt

  // Relation to BundleProduct
  bundleProducts BundleProduct[]
}

// Bundle Product Model:

model BundleProduct {
  /// Primary key for the bundle product relation
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  /// Foreign key to the related bundle
  bundleId  String @db.ObjectId
  /// Foreign key to the related product
  productId String @db.ObjectId
  /// Quantity of the product in the bundle
  quantity  Int    @default(1)

  // Relations
  bundle  Bundle  @relation(fields: [bundleId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// Search-Filter Model:

model SearchFilter {
  /// Primary key for the search filter
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Name of the filter (e.g., Size, Brand)
  filterName String
  /// Date when the filter was created
  createdAt  DateTime @default(now())
  /// Date when the filter was last updated
  updatedAt  DateTime @updatedAt

  ProductFilter ProductFilter[]
}

// Product-Filter Model:

model ProductFilter {
  /// Primary key for the product filter relation
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  /// Foreign key to the related product
  productId String @db.ObjectId
  /// Foreign key to the related search filter
  filterId  String @db.ObjectId
  /// Value of the filter (e.g., 185/65R15 for Size filter)
  value     String

  // Relations
  product Product      @relation(fields: [productId], references: [id])
  filter  SearchFilter @relation(fields: [filterId], references: [id])
}

// ProductTags Model:

model ProductTag {
  /// Primary key for the product tag relation
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  /// Foreign key to the related product
  productId String @db.ObjectId
  /// Tag name (e.g., "Winter", "Tires")
  tagName   String

  // Relation to Product
  product Product @relation(fields: [productId], references: [id])
}

// model Order {
//   id               String   @id @default(auto()) @map("_id") @db.ObjectId
//   user_id          String?  @db.ObjectId
//   status           String   @default("pending") // Can be pending, processing, shipped, delivered, cancelled
//   total_amount     Float
//   shipping_address String
//   billing_address  String
//   payment_status   String   @default("pending") // Can be pending, paid, failed
//   tracking_number  String?
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt

//   // Relations
//   user       User?        @relation(fields: [user_id], references: [id], name: "UserOrders") // Make user nullable
//   orderItems OrderItem[]
//   shipments  Shipment[]
// }
model Order {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id          String?  @db.ObjectId
  status           String   @default("pending") // Can be pending, processing, shipped, delivered, cancelled
  total_amount     Float
  shipping_address String
  billing_address  String
  payment_status   String   @default("pending") // Can be pending, paid, failed
  tracking_number  String?
  stripePaymentId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user       User?        @relation(fields: [user_id], references: [id], name: "UserOrders") // Make user nullable
  orderItems OrderItem[]
  shipments  Shipment[]
}

// model OrderItem {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   product_id  String?  @db.ObjectId // Make product_id nullable
//   quantity    Int
//   price       Float
//   total_price Float
//   order       Order    @relation(fields: [order_id], references: [id])
//   order_id    String   @db.ObjectId

//   // Relations
//   product     Product? @relation(fields: [product_id], references: [id]) // Make product nullable
// }
model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product_id  String?  @db.ObjectId // Make product_id nullable
  quantity    Int
  price       Float
  total_price Float
  order       Order    @relation(fields: [order_id], references: [id])
  order_id    String   @db.ObjectId

  // Relations
  product     Product? @relation(fields: [product_id], references: [id]) // Make product nullable
}


// Cart Model:

model Cart {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  product_id String   @db.ObjectId
  quantity   Int
  addedAt    DateTime @default(now())

  // Relations
  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

// Wishlist Model:

model Wishlist {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  product_id String   @db.ObjectId
  createdAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

// Discount Model:

model Discount {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id        String   @db.ObjectId
  product_id     String   @db.ObjectId
  discount_type  String // Can be percentage or fixed
  discount_value Float
  start_date     DateTime
  end_date       DateTime
  is_active      Boolean  @default(true)

  // Relations
  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

// Reviews Model:

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String   @db.ObjectId
  product_id  String   @db.ObjectId
  rating      Int
  comment     String?
  is_approved Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

// Notification Model:

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String   @db.ObjectId
  type      String // Can be restock, promotion, order_status
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id])
}

// Shipment Model:

model Shipment {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  order_id           String    @db.ObjectId
  tracking_number    String
  carrier            String
  status             String    @default("processing") // Can be processing, shipped, in_transit, delivered
  estimated_delivery DateTime
  actual_delivery    DateTime?
  shipping_cost      Float

  // Relations
  order Order @relation(fields: [order_id], references: [id])
}

// Inventory_Tracking Model:

model InventoryTracking {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  product_id      String   @db.ObjectId
  change_quantity Int
  location        String
  date            DateTime @default(now())
  updated_by      String   @db.ObjectId

  // Relations
  product Product @relation(fields: [product_id], references: [id])
  user    User    @relation(fields: [updated_by], references: [id])
}

//  Sales_Reports Model:

model SalesReport {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  date                    DateTime
  total_sales             Float
  total_orders            Int
  total_customers         Int
  best_selling_product_id String   @db.ObjectId
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relation to best-selling product
  best_selling_product Product @relation(fields: [best_selling_product_id], references: [id])
}

// Product_Management Model:

model ProductManagement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product_id  String   @db.ObjectId
  admin_id    String   @db.ObjectId
  action      String
  description String?
  change_date DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product Product @relation(fields: [product_id], references: [id])
  admin   User    @relation(fields: [admin_id], references: [id])
}
